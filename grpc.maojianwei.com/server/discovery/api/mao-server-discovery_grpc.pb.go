// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.0
// source: mao-server-discovery.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaoServerDiscoveryClient is the client API for MaoServerDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaoServerDiscoveryClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (MaoServerDiscovery_ReportClient, error)
}

type maoServerDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewMaoServerDiscoveryClient(cc grpc.ClientConnInterface) MaoServerDiscoveryClient {
	return &maoServerDiscoveryClient{cc}
}

func (c *maoServerDiscoveryClient) Report(ctx context.Context, opts ...grpc.CallOption) (MaoServerDiscovery_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &MaoServerDiscovery_ServiceDesc.Streams[0], "/Mao.MaoServerDiscovery/Report", opts...)
	if err != nil {
		return nil, err
	}
	x := &maoServerDiscoveryReportClient{stream}
	return x, nil
}

type MaoServerDiscovery_ReportClient interface {
	Send(*ServerReport) error
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type maoServerDiscoveryReportClient struct {
	grpc.ClientStream
}

func (x *maoServerDiscoveryReportClient) Send(m *ServerReport) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maoServerDiscoveryReportClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaoServerDiscoveryServer is the server API for MaoServerDiscovery service.
// All implementations must embed UnimplementedMaoServerDiscoveryServer
// for forward compatibility
type MaoServerDiscoveryServer interface {
	Report(MaoServerDiscovery_ReportServer) error
	mustEmbedUnimplementedMaoServerDiscoveryServer()
}

// UnimplementedMaoServerDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedMaoServerDiscoveryServer struct {
}

func (UnimplementedMaoServerDiscoveryServer) Report(MaoServerDiscovery_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedMaoServerDiscoveryServer) mustEmbedUnimplementedMaoServerDiscoveryServer() {}

// UnsafeMaoServerDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaoServerDiscoveryServer will
// result in compilation errors.
type UnsafeMaoServerDiscoveryServer interface {
	mustEmbedUnimplementedMaoServerDiscoveryServer()
}

func RegisterMaoServerDiscoveryServer(s grpc.ServiceRegistrar, srv MaoServerDiscoveryServer) {
	s.RegisterService(&MaoServerDiscovery_ServiceDesc, srv)
}

func _MaoServerDiscovery_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaoServerDiscoveryServer).Report(&maoServerDiscoveryReportServer{stream})
}

type MaoServerDiscovery_ReportServer interface {
	Send(*ServerResponse) error
	Recv() (*ServerReport, error)
	grpc.ServerStream
}

type maoServerDiscoveryReportServer struct {
	grpc.ServerStream
}

func (x *maoServerDiscoveryReportServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maoServerDiscoveryReportServer) Recv() (*ServerReport, error) {
	m := new(ServerReport)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaoServerDiscovery_ServiceDesc is the grpc.ServiceDesc for MaoServerDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaoServerDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mao.MaoServerDiscovery",
	HandlerType: (*MaoServerDiscoveryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _MaoServerDiscovery_Report_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mao-server-discovery.proto",
}
